name: Build and Push Multi-Arch Docker Image # Nazwa workflow

on:
  push:
    branches:
      - main # Workflow uruchamia się po pushu na gałąź main

jobs:
  build:
    runs-on: ubuntu-latest # Wykonanie joba na najnowszym Ubuntu
    permissions:
      security-events: write # Pozwala zapisywać wyniki skanowania bezpieczeństwa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Pobranie kodu z repozytorium

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # Konfiguracja QEMU do cross-compilacji (wielu architektur)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Ustawienie narzędzia Buildx do budowania obrazów wieloarchitekturnych

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # Logowanie do DockerHub, aby móc pushować obrazy i cache

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
        # Logowanie do GitHub Container Registry (GHCR), gdzie będą wrzucane obrazy

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64 # Budowanie obrazów dla amd64 i arm64
          push: true # Wysyłanie obrazów do rejestru
          tags: |
            ghcr.io/${{ github.repository_owner }}/pawchozad2:latest
            ghcr.io/${{ github.repository_owner }}/pawchozad2:${{ github.sha }}
          cache-from: type=registry,ref=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/cache-pawchozad2:buildcache
          cache-to: type=registry,ref=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/cache-pawchozad2:buildcache,mode=max
        # Budowanie i pushowanie obrazu z tagami oraz wykorzystanie cache z DockerHub

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/pawchozad2:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
        # Skanowanie obrazu narzędziem Trivy pod kątem podatności (tylko CRITICAL i HIGH)

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        # Wysyłanie wyników skanowania do zakładki Security w GitHubie
